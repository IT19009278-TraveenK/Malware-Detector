import { useState } from "react";
import AccuracyChart from "../piechart/accuracyChart";
import styles from "./resultsContainer.module.scss";
import { startTraining } from "@/app/api";

export default function ResultsContainer() {
  const [isTrained, setIsTrained] = useState<boolean>(false);
  const [isTraining, setIsTraining] = useState<boolean>(false);
  const [randomForestData, setRandomForestData] = useState<any>(null);
  const [logisticRegressionData, setLogisticRegressionData] =
    useState<any>(null);
  const [neuralNetworkData, setNeuralNetworkData] = useState<any>(null);
  const [results, setResults] = useState<any>(null);
  const data = [
    { name: "Group A", value: 400 },
    { name: "Group B", value: 300 },
  ];

  const trainModels = async () => {
    if (!isTraining) {
      setIsTraining(true);
      const results = await startTraining();
      setLogisticRegressionData([
        {
          name: "Correct Prediction",
          value: results.logistic_regression_accuracy * 100,
        },
        {
          name: "Wrong Prediction",
          value: 100 - results.logistic_regression_accuracy * 100,
        },
      ]);
      setRandomForestData([
        {
          name: "Correct Prediction",
          value: results.random_forest_accuracy * 100,
        },
        {
          name: "Wrong Prediction",
          value: 100 - results.random_forest_accuracy * 100,
        },
      ]);
      setNeuralNetworkData([
        {
          name: "Correct Prediction",
          value: results.neural_network_accuracy * 100,
        },
        {
          name: "Wrong Prediction",
          value: 100 - results.neural_network_accuracy * 100,
        },
      ]);
      setResults(results);
      setIsTrained(true);
      setIsTraining(false);
    }
  };
  return (
    <div className={styles.resultsContainer}>
      {isTrained ? (
        <>
          <div className={styles.modelContainer}>
            <AccuracyChart data={randomForestData} />
            {results.random_forest_heatmap && (
              <div className={styles.heatMap}>
                <img
                  src={`data:image/png;base64,${results.random_forest_heatmap}`}
                  alt="Confusion Matrix"
                />
              </div>
            )}
            <p className={styles.label}> Random Forest</p>
          </div>
          <div className={styles.modelContainer}>
            <AccuracyChart data={logisticRegressionData} />
            {results.logistic_regression_heatmap && (
              <div className={styles.heatMap}>
                <img
                  src={`data:image/png;base64,${results.logistic_regression_heatmap}`}
                  alt="Confusion Matrix"
                />
              </div>
            )}
            <p className={styles.label}>Logistic Regression</p>
          </div>
          <div className={styles.modelContainer}>
            <AccuracyChart data={neuralNetworkData} />
            {results.neural_networks_heatmap && (
              <div className={styles.heatMap}>
                <img
                  src={`data:image/png;base64,${results.neural_networks_heatmap}`}
                  alt="Confusion Matrix"
                />
              </div>
            )}
            <p className={styles.label}> Neural Networks</p>
          </div>
        </>
      ) : (
        <div className={styles.trainBtn} onClick={trainModels}>
          {isTraining ? "Training Models ...." : "Train Models"}
        </div>
      )}
    </div>
  );
}
