import pandas as pd
import sys
import os
import contextlib
import io
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import base64
from io import BytesIO
import joblib
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from sklearn.metrics import f1_score, accuracy_score, ConfusionMatrixDisplay, confusion_matrix

def encode_plot_to_base64(plt_figure):
    buffer = BytesIO()
    plt_figure.savefig(buffer, format='png')
    plt.close(plt_figure)
    buffer.seek(0)  # Move to the beginning of the buffer
    encoded_image = base64.b64encode(buffer.getvalue()).decode('utf-8')
    buffer.close()  # Close the buffer
    return encoded_image

def trainer():
    # Load the Malware Dataset
    malData = pd.read_csv("https://github.com/PacktPublishing/Mastering-Machine-Learning-for-Penetration-Testing/raw/master/Chapter03/MalwareData.csv.gz", sep="|", low_memory=True)

    # Data Cleaning
    y = malData['legitimate']
    # malData = malData.drop(['legitimate'], axis=1)
    malData = malData.drop(['legitimate', 'Name', 'md5', 'SectionsMeanEntropy', 'SectionsMinEntropy', 'SectionsMaxEntropy', 'SectionsMeanRawsize', 'SectionsMinRawsize', 'SectionMaxRawsize', 'SectionsMeanVirtualsize', 'SectionsMinVirtualsize', 'SectionMaxVirtualsize', 'ImportsNbDLL', 'ImportsNb', 'ImportsNbOrdinal', 'ExportNb', 'ResourcesNb', 'ResourcesMeanEntropy', 'ResourcesMinEntropy', 'ResourcesMaxEntropy', 'ResourcesMeanSize', 'ResourcesMinSize', 'ResourcesMaxSize', 'LoadConfigurationSize', 'VersionInformationSize'], axis=1)
    print("Dropped unwanted features successfully")

    # Split the Dataset into Training and Testing Sets
    X_train, X_test, y_train, y_test = train_test_split(malData, y, test_size=0.2, random_state=42)

    # Model Building - Random Forest
    clf = RandomForestClassifier(max_depth=2, random_state=0)
    randomModel = clf.fit(X_train, y_train)

    # Random Forest Evaluation on Test Data
    train_pred = randomModel.predict(X_train)
    accuracy_train = accuracy_score(y_train, train_pred)
    print("Accuracy on the training dataset (Random Forest):", accuracy_train)

    prediction = randomModel.predict(X_test)
    accuracy_test = accuracy_score(y_test, prediction)
    f1 = f1_score(y_test, prediction)
    print("Accuracy on the test dataset (Random Forest):", accuracy_test)
    print("F1 Score on the test dataset (Random Forest):", f1)

    # Compute the confusion matrix
    cm = confusion_matrix(y_test, prediction)

    # Plot the confusion matrix as a heatmap
    rf_plot = plt.figure(figsize=(8, 6))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['legitimate'], yticklabels=['legitimate'])
    plt.xlabel('Predicted Label')
    plt.ylabel('True Label')
    plt.title('Confusion Matrix')
    rf_heatmap = encode_plot_to_base64(rf_plot)


    # Model Building - Logistic Regression
    clf = LogisticRegression(random_state=0)
    logModel = clf.fit(X_train, y_train)

    # Logistic Regression Model Evaluation
    train_log = logModel.predict(X_train)
    accuracy_train_log = accuracy_score(y_train, train_log)
    print("Accuracy on the training dataset (Logistic Regression):", accuracy_train_log)

    pred = logModel.predict(X_test)
    accuracy_test_log = accuracy_score(y_test, pred)
    f1_log = f1_score(y_test, pred)
    print("Accuracy on the test dataset (Logistic Regression):", accuracy_test_log)
    print("F1 Score on the test dataset (Logistic Regression):", f1_log)

    # Compute the confusion matrix
    cm = confusion_matrix(y_test, pred)
    print("Logistic Regression heatmap", cm)

    # Plot the confusion matrix as a heatmap
    lr_plot = plt.figure(figsize=(8, 6))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', xticklabels=['legitimate'], yticklabels=['legitimate'])
    plt.xlabel('Predicted Label')
    plt.ylabel('True Label')
    plt.title('Confusion Matrix')
    lr_heatmap = encode_plot_to_base64(lr_plot)

    # Model Building - Neural Network
    model = Sequential()
    model.add(Dense(16, input_dim=32, activation="relu"))
    model.add(Dense(8, activation="relu"))
    model.add(Dense(4, activation="relu"))
    model.add(Dense(1, activation='sigmoid'))
    model.compile(loss="binary_crossentropy", optimizer="rmsprop", metrics=["accuracy"])
    model.fit(X_train, y_train, epochs=5, batch_size=32)

    # Neural Network Model Evaluation
    trainPred = model.predict(X_train)
    trainPred = [1 if y >= 0.5 else 0 for y in trainPred]
    accuracy_train_nn = accuracy_score(y_train, trainPred)
    print("Accuracy on the training dataset (Neural Network):", accuracy_train_nn)

    y_prediction = model.predict(X_test)
    y_prediction = [1 if y >= 0.5 else 0 for y in y_prediction]
    accuracy_test_nn = accuracy_score(y_test, y_prediction)
    f1_nn = f1_score(y_test, y_prediction)
    print("Accuracy on the test dataset (Neural Network):", accuracy_test_nn)
    print("F1 Score on the test dataset (Neural Network):", f1_nn)

    # Confusion Matrix
    cm_nn = confusion_matrix(y_test, y_prediction)
    nn_plot = plt.figure(figsize=(8, 6))
    sns.heatmap(cm_nn, annot=True, fmt='d', cmap='Blues', xticklabels=['legitimate'], yticklabels=['legitimate'])
    plt.xlabel('Predicted Label')
    plt.ylabel('True Label')
    plt.title('Confusion Matrix')
    nn_heatmap = encode_plot_to_base64(nn_plot)

    # Saving the Models
    # Random Forest
    joblib.dump(randomModel, './Models/random_forest_model.joblib')
    print("Random Forest model saved successfully.")

    # Logistic Regression
    joblib.dump(logModel, './Models/logistic_regression_model.joblib')
    print("Logistic Regression model saved successfully.")

    # Neural Network
    model.save('./Models/neural_network_model')
    print("Neural Network model saved successfully.")
    
    return {
    'random_forest_accuracy': accuracy_test,
    'logistic_regression_accuracy': accuracy_test_log,
    'neural_network_accuracy': accuracy_test_nn,
    'random_forest_heatmap': rf_heatmap,
    'logistic_regression_heatmap': lr_heatmap,
    'neural_networks_heatmap': nn_heatmap
    }